#/bin/bash
#expecting input data as numbered LF images like 0000.png, 0001.png...with camera moving from left to right
INPUT_DATA="/home/ichlubna/Downloads/frames/pavilion/ten/"
#interpolation parameter - how far are views
#recommended values:
#full: pavilion 0.0006, sand 0.002, cars 0.007, bunny 0.0027 
#fifth: pavilion 0.004, sand 0.011, cars 0.04, bunny 0.01 
#tenth: pavilion 0.009, sand 0.02, cars 0.07, bunny 0.02 
INTERPOLATION_DISPLACEMENT=0.009
#the focusing distance
#recommended values>
#pavilion 900, sand 00, cars 5000, bunny 3350 
BLENDING_FOCUS=900
CODEC_BIN="../build/lfCodec"
INTERPOLATOR="./interpolate.py"
LF_BLENDING="./lfBlending.py"
METRICS_SH="./metrics"
#https://github.com/myungsub/meta-interpolation
#the run_test.sh script needs to be edited to include the correct input dir etc.
META_DIR="../../meta-interpolation-master"

for CRF in $(seq 5 7 50); do
echo "Processing CRF "$CRF

TEMP=$(mktemp -d)
WORKING_DIR="./working"$CRF
ENCODED="./encoded"$CRF
OUTPUT="./output"$CRF

rm -rf $ENCODED
rm -rf $OUTPUT
rm -rf $WORKING_DIR
mkdir -p $WORKING_DIR
mkdir -p $ENCODED
mkdir -p $OUTPUT
$CODEC_BIN --input $INPUT_DATA --output $ENCODED --crf $CRF

INPUT_FILES=($(ls $INPUT_DATA))
COUNT=$(ls $INPUT_DATA | wc -l)
COUNT_DEC=$((COUNT-1))
DECODED=$(mkdir -p $WORKING_DIR"/decoded")
DIRS=("decoded" "decodedClassic" "decodedAllKey")
DECODED_CLASSIC=$(mkdir -p $WORKING_DIR"/"${DIRS[1]})
DECODED_ALLKEY=$(mkdir -p $WORKING_DIR"/"${DIRS[2]})

#Measuring decoding times and visual quality of the decoded frames
for i in $(seq 0 $COUNT_DEC); do
    echo "Decoding: "${INPUT_FILES[i]}
    FACTOR=$(bc -l <<< $i/$COUNT_DEC)
    TIMES=$($CODEC_BIN --input $ENCODED --output $TEMP --factor $FACTOR) 
    TIME=$(echo $TIMES | grep -o -P '(?<=time:).*?(?=ms)') 
    TIME_CLASSIC=$(echo $TIMES | grep -o -P '(?<=classic:).*?(?=ms)') 
    TIME_ALLKEY=$(echo $TIMES | grep -o -P '(?<=key:).*?(?=ms)')
    echo $TIME,$TIME_CLASSIC,$TIME_ALLKEY >> $OUTPUT"/times.csv"
    $METRICS_SH $TEMP"/"$i".png" $INPUT_DATA"/"${INPUT_FILES[i]} >> $OUTPUT"/metrics.csv"
    $METRICS_SH $TEMP"/"$i"-classic.png" $INPUT_DATA"/"${INPUT_FILES[i]} >> $OUTPUT"/metricsClassic.csv"
    $METRICS_SH $TEMP"/"$i"-classicAllKey.png" $INPUT_DATA"/"${INPUT_FILES[i]} >> $OUTPUT"/metricsAllKey.csv"
    mv $TEMP"/"$i".png" $WORKING_DIR"/decoded/"${INPUT_FILES[i]} 
    mv $TEMP"/"$i"-classic.png" $WORKING_DIR$"/"${DIRS[1]}"/"${INPUT_FILES[i]} 
    mv $TEMP"/"$i"-classicAllKey.png" $WORKING_DIR"/"${DIRS[2]}"/"${INPUT_FILES[i]} 
done

COUNT_DEC_DEC=$((COUNT_DEC-1))
#Using LF interpolation
for i in $(seq 0 $COUNT_DEC_DEC); do 
    echo "Interpolating: "${INPUT_FILES[i]}
    python $INTERPOLATOR $INPUT_DATA"/"${INPUT_FILES[i]} $INPUT_DATA"/"${INPUT_FILES[$((i+1))]} $TEMP"/reference.png" $INTERPOLATION_DISPLACEMENT
    for j in $(seq 0 2); do
        DIR=$WORKING_DIR"/"${DIRS[j]}
        python $INTERPOLATOR $DIR"/"${INPUT_FILES[i]} $DIR"/"${INPUT_FILES[$((i+1))]} $TEMP"/testing.png"    
        $METRICS_SH $TEMP"/testing.png" $TEMP"/reference.png" >> $OUTPUT"/interpolationMetrics"${DIRS[j]}".csv"
        rm $TEMP"/testing.png"
    done
    rm $TEMP"/reference.png" 
done

#Using SAVFI for frame interpolation
echo "Interpolating deep"
INTER_DIR=$META_DIR"/inputdata"
rm -rf $INTER_DIR
$(mkdir -p $INTER_DIR)
ffmpeg -i $INPUT_DATA"/%04d.png" -vf "scale=1024x720" $INTER_DIR"/%04d.png"
CURRENT_DIR=$(pwd)
cd $META_DIR
./scripts/run_test.sh
cd $CURRENT_DIR
REF=$WORKING_DIR"/reference"
$(mkdir -p $REF)
REF_FILES=($(ls $INTER_DIR))
REF_COUNT=$(ls $INTER_DIR | wc -l)
REF_COUNT_DEC=$((REF_COUNT-1))
for i in $(seq 0 $REF_COUNT_DEC); do
    if [[ ${REF_FILES[i]} == *"0.500"* ]]; then
        cp $INTER_DIR"/"${REF_FILES[i]} $REF"/"
    fi
done
REF_FILES=($(ls $REF))
REF_COUNT=$(ls $REF | wc -l)
REF_COUNT_DEC=$((REF_COUNT-1))
for j in $(seq 0 2); do
    rm -rf $INTER_DIR
    $(mkdir -p $INTER_DIR)
    ffmpeg -i $WORKING_DIR"/"${DIRS[j]}"/%04d.png" -vf "scale=1024x720" $INTER_DIR"/%04d.png"
    cd $META_DIR
    ./scripts/run_test.sh
    cd $CURRENT_DIR
    for i in $(seq 0 $REF_COUNT_DEC); do
        $METRICS_SH $INTER_DIR"/"${REF_FILES[i]} $REF"/"${REF_FILES[i]} >> $OUTPUT"/deep"${DIRS[j]}".csv"
    done
done
rm -rf $INTER_DIR

#lightfield blending
BLENDED_FILE=$TEMP/"blend.png"
BLENDED_REF_FILE=$TEMP/"blendRef.png"
python $LF_BLENDING $INPUT_DATA $BLENDING_FOCUS $((COUNT_DEC/2)) $BLENDED_REF_FILE
MISC_LOG=$OUTPUT"/misc.csv"
echo "Blended" >> $MISC_LOG
for j in $(seq 0 2); do
    DIR=$WORKING_DIR"/"${DIRS[j]}
    python $LF_BLENDING $DIR $BLENDING_FOCUS $((COUNT_DEC/2)) $BLENDED_FILE 
    $METRICS_SH $BLENDED_FILE $BLENDED_REF_FILE >> $MISC_LOG
done

#size info
echo "Sizes" >> $MISC_LOG
echo "Offsets" >> $MISC_LOG
stat --printf="%s" $ENCODED"/offsets.lfo" >> $MISC_LOG
echo "" >> $MISC_LOG
echo "Packets" >> $MISC_LOG
stat --printf="%s" $ENCODED"/packets.lfp" >> $MISC_LOG
echo "" >> $MISC_LOG
echo "Reference" >> $MISC_LOG
stat --printf="%s" $ENCODED"/reference.ts" >> $MISC_LOG
echo "" >> $MISC_LOG
echo "Classic" >> $MISC_LOG
stat --printf="%s" $ENCODED"/classic.ts" >> $MISC_LOG
echo "" >> $MISC_LOG
echo "AllKey" >> $MISC_LOG
stat --printf="%s" $ENCODED"/classicKey.ts" >> $MISC_LOG
echo "" >> $MISC_LOG
echo "Frame count" >> $MISC_LOG
echo $COUNT >> $MISC_LOG

rm -rf $TEMP
done
