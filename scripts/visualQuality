#!/bin/bash
#expecting input data as numbered LF images like 0000.png, 0001.png...with camera moving from left to right
INPUT_DATA=$1
OUTPUT_DATA=$2
mkdir -p $OUTPUT_DATA
#interpolation parameter - how far are views
INTERPOLATION_DISPLACEMENT=$3
#the focusing distance
BLENDING_FOCUS=$4

CODEC_BIN="../build/lfCodec"
INTERPOLATOR="./interpolate.py"
LF_BLENDING="./lfBlending.py"
METRICS_SH="./metrics"
#https://github.com/myungsub/meta-interpolation
#the run_test.sh script needs to be edited to include the correct input dir etc.
META_DIR="../../meta-interpolation-master"
for CRF in $(seq 0 7 49); do
echo "Processing CRF "$CRF

TEMP=$(mktemp -d)
WORKING_DIR="./working"$CRF
ENCODED="./encoded"$CRF
OUTPUT=$OUTPUT_DATA"/output"$CRF

rm -rf $ENCODED
rm -rf $OUTPUT
rm -rf $WORKING_DIR
mkdir -p $WORKING_DIR
mkdir -p $ENCODED
mkdir -p $OUTPUT
$CODEC_BIN --input $INPUT_DATA --output $ENCODED --crf $CRF

INPUT_FILES=($(ls $INPUT_DATA))
COUNT=$(ls $INPUT_DATA | wc -l)
COUNT_DEC=$((COUNT-1))
DIRS=("proposed" "classic" "classic30" "classicAllKey")
DIRS_LENGTH=$(( ${#DIRS[@]}-1 ))
for j in $(seq 0 $DIRS_LENGTH); do
    mkdir -p $WORKING_DIR"/"${DIRS[j]}
done

#Measuring decoding times and visual quality of the decoded frames
for i in $(seq 0 $COUNT_DEC); do
    echo "Decoding: "${INPUT_FILES[i]}
    FACTOR=$(bc -l <<< $i/$COUNT_DEC)
    TIMES=$($CODEC_BIN --input $ENCODED --output $TEMP --factor $FACTOR) 
    PROPOSED_TIME_PACKET=$(echo $TIMES | grep -o -P '(?<=packet:).*?(?=ms)') 
    PROPOSED_TIME_REF=$(echo $TIMES | grep -o -P '(?<=reference:).*?(?=ms)') 
    PROPOSED_TIME_STORE=$(echo $TIMES | grep -o -P '(?<=Storing:).*?(?=ms)' | sed -n 1p) 
    CLASSIC_TIME=$(echo $TIMES | grep -o -P '(?<=classic:).*?(?=ms)') 
    CLASSIC_TIME_SEEK=$(echo $TIMES | grep -o -P '(?<=seeking:).*?(?=ms)' | sed -n 1p) 
    CLASSIC_TIME_STORE=$(echo $TIMES | grep -o -P '(?<=Storing:).*?(?=ms)' | sed -n 2p) 
    GOP_TIME=$(echo $TIMES | grep -o -P '(?<=gop:).*?(?=ms)') 
    GOP_TIME_SEEK=$(echo $TIMES | grep -o -P '(?<=seeking:).*?(?=ms)' | sed -n 2p) 
    GOP_TIME_STORE=$(echo $TIMES | grep -o -P '(?<=Storing:).*?(?=ms)' | sed -n 3p) 
    KEY_TIME=$(echo $TIMES | grep -o -P '(?<=key:).*?(?=ms)')
    KEY_TIME_STORE=$(echo $TIMES | grep -o -P '(?<=Storing:).*?(?=ms)' | sed -n 4p) 
    PROPOSED_TIME_INIT=$(echo $TIMES | grep -o -P '(?<=Init:).*?(?=ms)' | sed -n 1p) 
    CLASSIC_TIME_INIT=$(echo $TIMES | grep -o -P '(?<=Init:).*?(?=ms)' | sed -n 2p) 
    GOP_TIME_INIT=$(echo $TIMES | grep -o -P '(?<=Init:).*?(?=ms)' | sed -n 3p) 
    KEY_TIME_INIT=$(echo $TIMES | grep -o -P '(?<=Init:).*?(?=ms)' | sed -n 4p) 
    echo $PROPOSED_TIME_PACKET,$PROPOSED_TIME_REF,$PROPOSED_TIME_STORE,$CLASSIC_TIME,$CLASSIC_TIME_SEEK,$CLASSIC_TIME_STORE,$GOP_TIME,$GOP_TIME_SEEK,$GOP_TIME_STORE,$KEY_TIME,$KEY_TIME_STORE,$PROPOSED_TIME_INIT,$CLASSIC_TIME_INIT,$GOP_TIME_INIT,$KEY_TIME_INIT >> $OUTPUT"/times.csv"
    for j in $(seq 0 $DIRS_LENGTH); do
        DIR_NAME=${DIRS[j]}
        DIR=$WORKING_DIR"/"$DIR_NAME
        $METRICS_SH $TEMP"/"$i"-"$DIR_NAME".png" $INPUT_DATA"/"${INPUT_FILES[i]} >> $OUTPUT"/metrics"$DIR_NAME".csv"
        mv $TEMP"/"$i-$DIR_NAME".png" $DIR"/"${INPUT_FILES[i]} 
    done
done

COUNT_DEC_DEC=$((COUNT_DEC-1))
#Using LF interpolation
for i in $(seq 0 $COUNT_DEC_DEC); do 
    echo "Interpolating: "${INPUT_FILES[i]}
    python $INTERPOLATOR $INPUT_DATA"/"${INPUT_FILES[i]} $INPUT_DATA"/"${INPUT_FILES[$((i+1))]} $TEMP"/reference.png" $INTERPOLATION_DISPLACEMENT
    for j in $(seq 0 $DIRS_LENGTH); do
        DIR=$WORKING_DIR"/"${DIRS[j]}
        python $INTERPOLATOR $DIR"/"${INPUT_FILES[i]} $DIR"/"${INPUT_FILES[$((i+1))]} $TEMP"/testing.png"    
        $METRICS_SH $TEMP"/testing.png" $TEMP"/reference.png" >> $OUTPUT"/interpolationMetrics"${DIRS[j]}".csv"
        rm $TEMP"/testing.png"
    done
    rm $TEMP"/reference.png" 
done

#Using SAVFI for frame interpolation
echo "Interpolating deep"
INTER_DIR=$META_DIR"/inputdata"
rm -rf $INTER_DIR
$(mkdir -p $INTER_DIR)
ffmpeg -i $INPUT_DATA"/%04d.png" -vf "scale=1024x720" $INTER_DIR"/%04d.png"
CURRENT_DIR=$(pwd)
cd $META_DIR
./scripts/run_test.sh
cd $CURRENT_DIR
REF=$WORKING_DIR"/reference"
$(mkdir -p $REF)
REF_FILES=($(ls $INTER_DIR))
REF_COUNT=$(ls $INTER_DIR | wc -l)
REF_COUNT_DEC=$((REF_COUNT-1))
for i in $(seq 0 $REF_COUNT_DEC); do
    if [[ ${REF_FILES[i]} == *"0.500"* ]]; then
        cp $INTER_DIR"/"${REF_FILES[i]} $REF"/"
    fi
done
REF_FILES=($(ls $REF))
REF_COUNT=$(ls $REF | wc -l)
REF_COUNT_DEC=$((REF_COUNT-1))
for j in $(seq 0 $DIRS_LENGTH); do
    rm -rf $INTER_DIR
    $(mkdir -p $INTER_DIR)
    ffmpeg -i $WORKING_DIR"/"${DIRS[j]}"/%04d.png" -vf "scale=1024x720" $INTER_DIR"/%04d.png"
    cd $META_DIR
    ./scripts/run_test.sh
    cd $CURRENT_DIR
    for i in $(seq 0 $REF_COUNT_DEC); do
        $METRICS_SH $INTER_DIR"/"${REF_FILES[i]} $REF"/"${REF_FILES[i]} >> $OUTPUT"/deep"${DIRS[j]}".csv"
    done
done
rm -rf $INTER_DIR

#lightfield blending
BLENDED_FILE=$TEMP/"blend.png"
BLENDED_REF_FILE=$TEMP/"blendRef.png"
python $LF_BLENDING $INPUT_DATA $BLENDING_FOCUS $((COUNT_DEC/2)) $BLENDED_REF_FILE
MISC_LOG=$OUTPUT"/misc.csv"
echo "Blended" >> $MISC_LOG
for j in $(seq 0 $DIRS_LENGTH); do
    DIR=$WORKING_DIR"/"${DIRS[j]}
    python $LF_BLENDING $DIR $BLENDING_FOCUS $((COUNT_DEC/2)) $BLENDED_FILE 
    $METRICS_SH $BLENDED_FILE $BLENDED_REF_FILE >> $MISC_LOG
done

#size info
echo "Sizes" >> $MISC_LOG
echo "Offsets" >> $MISC_LOG
stat --printf="%s" $ENCODED"/offsets.lfo" >> $MISC_LOG
echo "" >> $MISC_LOG
echo "Packets" >> $MISC_LOG
stat --printf="%s" $ENCODED"/packets.lfp" >> $MISC_LOG
echo "" >> $MISC_LOG
echo "Reference" >> $MISC_LOG
stat --printf="%s" $ENCODED"/reference.ts" >> $MISC_LOG
echo "" >> $MISC_LOG
echo "Classic" >> $MISC_LOG
stat --printf="%s" $ENCODED"/classic.ts" >> $MISC_LOG
echo "" >> $MISC_LOG
echo "Classic30" >> $MISC_LOG
stat --printf="%s" $ENCODED"/classic30.ts" >> $MISC_LOG
echo "" >> $MISC_LOG
echo "AllKey" >> $MISC_LOG
stat --printf="%s" $ENCODED"/classicKey.ts" >> $MISC_LOG
echo "" >> $MISC_LOG
echo "Frame count" >> $MISC_LOG
echo $COUNT >> $MISC_LOG

rm -rf $TEMP
rm -rf $ENCODED
rm -rf $WORKING_DIR
done
